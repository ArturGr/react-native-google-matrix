{"version":3,"file":"index.common.js","sources":["../src/index.js"],"sourcesContent":["'use strict';\nvar qs = require('querystring');\n\nconst DISTANCE_API_URL = 'https://maps.googleapis.com/maps/api/distancematrix/json?';\nconst requestError = (err, callback) => {\n  callback(new Error('Request error: Could not fetch data from Google\\'s servers: ' + err));\n}\n\n/**\n * An object that caches keys for use with the Google Distance Matrix API.\n * @type {GoogleDistance}\n */\nclass GoogleDistance {\n  /**\n   * Sets keys necessary to access the Google Distance Matrix API.\n   * @method\n   * @param  {Object} namedArgs an object for destructuring named arguments\n   * @param {String|undefined} namedArgs.apiKey your api key\n   * @param {String|undefined} namedArgs.businessClientKey your business client key\n   * @param {String|undefined} namedArgs.businessSignatureKey your business signaturek ey\n   * @return {GoogleDistance} a GoogleDistance object.\n   */\n  constructor(namedArgs={}){\n    let {apiKey, businessClientKey, businessSignatureKey} = namedArgs;\n    this.apiKey = apiKey || '';\n    this.businessClientKey = businessClientKey || '';\n    this.businessSignatureKey =  businessSignatureKey || '';\n  }\n  /**\n   * Processes input options and calls the API.\n   * @method\n   * @param  {Object}   args     Options to pass to the API.\n   * @param  {Function} callback a callback to handle (err, success)\n   * @return {undefined}\n   */\n  get(args, callback){\n    const options = this.formatOptions(args);\n    this.fetchData(options, function(err, data){\n      if (err) return callback(err);\n      this.formatResults(data, options, function(err, results) {\n        if (err) return callback(err);\n        return callback(null, results);\n      });\n    });\n  }\n  /**\n   * Preprocesses the options to pass the Google API\n   * @param  {Object} args options to pass the Google API\n   * @return {Object}\n   * @throws {Error} if any invalid origins / destinations are input\n   */\n  formatOptions(args){\n    let {\n      index, origin, origins, destination, destinations, mode, units, language,\n      avoid, sensor, key\n    } = args;\n    let batchMode = false;\n    index    = index    || null;\n    mode     = mode     || 'driving';\n    units    = units    || 'metric';\n    language = language || 'en';\n    avoid    = avoid    || null;\n    sensor   = sensor   || false;\n    key      = this.apiKey;\n\n    if (!origin && origins){\n      origins = origins.join('|');\n      batchMode = true;\n    }\n    if (!destination && destinations){\n      destinations = destinations.join('|');\n      batchMode = true;\n    }\n    if (!origins) throw new Error('Argument Error: Origin is invalid');\n    if (!destinations) throw new Error('Argument Error: Destination is invalid');\n\n    return Object.assign({\n      index, origins, destinations, mode, units, language, avoid, sensor, key\n    }, batchMode && {batchMode}) //only include batchMode if true\n  }\n  /**\n   * Formats the results to... something\n   * @method\n   * @param  {Object}   data     a response as seen at\n   * @param  {Object]}   options  ...\n   * @param  {Function} callback error/success handler function(err, data)\n   * @return {Object|Object[]} An array of processed result elements\n   */\n  formatResults(data, options, callback) {\n    /**\n     * Processes one element of an API response\n     * @function\n     * @param  {element} element\n     * @return {Object} { index, distance, duration, durationValue, origin,\n     *  destination, mode, units, avoid, sensor }\n     */\n    const formatData = element => {\n      return {\n        index: options.index,\n        distance: element.distance.text,\n        distanceValue: element.distance.value,\n        duration: element.duration.text,\n        durationValue: element.duration.value,\n        origin: element.origin,\n        destination: element.destination,\n        mode: options.mode,\n        units: options.units,\n        language: options.language,\n        avoid: options.avoid,\n        sensor: options.sensor\n      };\n    };\n\n    if (data.status != 'OK') {\n      return callback(\n        new Error(`Status error: ${data.status}: ${data.error_message}`)\n      );\n    }\n    let results = [];\n\n    for (let i = 0; i < data.origin_addresses.length; i++) {\n      for (var j = 0; j < data.destination_addresses.length; j++) {\n        var element = data.rows[i].elements[j];\n        let {status} = element;\n        if (status != 'OK') {\n          return callback(new Error(`Result error: ${resultStatus}`));\n        }\n        element.origin = data.origin_addresses[i];\n        element.destination = data.destination_addresses[j];\n\n        results.push(formatData(element));\n      }\n    }\n\n    if (results.length == 1 && !options.batchMode) {\n      results = results[0];\n    }\n    return callback(null, results);\n  };\n  /**\n   * Fetches data\n   * @param  {Object}   options  see formatResults's return\n   * @param  {Function} callback Error/success handler function(err, data)\n   * @return {undefined}\n   */\n  fetchData(options, callback) {\n    fetch(DISTANCE_API_URL + qs.stringify(options))\n      .then((response) => {\n        if(response.status != 200) {\n          let error = new Error(response.statusText);\n          error.response = response;\n          throw error;\n        }\n        return response;\n      })\n      .then((response) => response.json())\n      .then((response) => {\n        callback(null, response);\n      })\n      .catch ((error) => {\n        requestError(error, callback);\n      });\n  }\n};\n// export {GoogleDistance};\nexport default new GoogleDistance;\n"],"names":["qs","require","DISTANCE_API_URL","requestError","err","callback","Error","GoogleDistance","namedArgs","apiKey","businessClientKey","businessSignatureKey","args","options","formatOptions","fetchData","data","formatResults","results","index","origin","origins","destination","destinations","mode","units","language","avoid","sensor","key","batchMode","join","Object","assign","formatData","element","distance","text","value","duration","status","error_message","i","origin_addresses","length","j","destination_addresses","rows","elements","resultStatus","push","stringify","then","response","error","statusText","json","catch"],"mappings":"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"}